name: github script release test
run-name: github script release test

on:
  workflow_dispatch:
    inputs:
      VERSION_TO_UPGRADE:
        description: 업그레이드할 버전
        type: choice
        required: true
        options:
          - major
          - minor
          - patch
        default: patch

env:
  owner: miridih-yhha
  repo: github-action-test

jobs:
  release:
    name: Release New Version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: 최신 릴리즈 버전 조회
        id: get-latest-release
        env:
          GH_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
        run: |
          OLD_RELEASE=$(gh api \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          /repos/${{ env.owner }}/${{ env.repo }}/releases/latest)
          
          echo "old-release=${OLD_RELEASE}" >> $GITHUB_ENV
        continue-on-error: true

      - name: 릴리즈 버전 조회 실패 시 최초 릴리즈로 간주
        if: ${{ get-latest-release.outcome != 'success' }}
        run: |
          NEW_VERSION="v1.0.0"
          echo "new-version=${NEW_VERSION}" >> $GITHUB_ENV

      - name: 버전업
        if: ${{ get-latest-release.outcome == 'success' }}
        run: |
          OLD_VERSION=${{ fromJson(env.old-release).tag_name }}
          echo "OLD_VERSION: ${OLD_VERSION}"
          
          major=$(echo $OLD_VERSION | cut -d. -f1 | sed 's/v//')
          minor=$(echo $OLD_VERSION | cut -d. -f2)
          patch=$(echo $OLD_VERSION | cut -d. -f3)
          
          INCREMENT_TYPE=${{ inputs.VERSION_TO_UPGRADE }}
          if [ "$INCREMENT_TYPE" == "major" ]; then
          ((major++))
          minor=0
          patch=0
          elif [ "$INCREMENT_TYPE" == "minor" ]; then
          ((minor++))
          patch=0
          elif [ "$INCREMENT_TYPE" == "patch" ]; then
          ((patch++))
          else
          echo "Invalid increment type!"
          exit 1
          fi
          
          NEW_VERSION="v$major.$minor.$patch"
          echo "new-version=${NEW_VERSION}" >> $GITHUB_ENV

      - name: 버전업 태그 생성
        env:
          GH_TOKEN: ${{ secrets.WORKFLOW_TOKEN }}
        run: |
          NEW_RELEASE=$(gh api \
          --method POST \
          -H "Accept: application/vnd.github+json" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          /repos/${{ env.owner }}/${{ env.repo }}/releases \
          -f tag_name=${{ env.new-version }} \
          -f target_commitish='main' \
          -f name=${{ env.new-version }} \
          -f body='${{ env.new-version }} release')
          
          echo "new-release=${NEW_RELEASE}" >> $GITHUB_ENV

      - name: 새 릴리즈에 api.jar 에셋 업데이트
        run: |
          curl -L \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.WORKFLOW_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          -H "Content-Type: application/java-archive" \
            "https://uploads.github.com/repos/${{ env.owner }}/${{ env.repo }}/releases/${{ fromJson(env.new-release).id }}/assets?name=api.jar" \
            --data-binary "@api.jar"

      - name: 새 릴리즈에 consumer.jar 에셋 업데이트
        run: |
          curl -L \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.WORKFLOW_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          -H "Content-Type: application/java-archive" \
            "https://uploads.github.com/repos/${{ env.owner }}/${{ env.repo }}/releases/${{ fromJson(env.new-release).id }}/assets?name=consumer.jar" \
            --data-binary "@consumer.jar"
